//semaphore udemy example


#include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaration)
#include <string.h>
#include <stdio.h>
#include <stdint.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <freertos/portable/GCC/portmacro_mpu.h>
#include <freertos/queue.h>
#include <freertos/semphr.h>

TaskHandle_t xHandle_1,xHandle_2,xHandle_3,Button_Task;

TaskHandle_t volatile next_task_handle;

QueueHandle_t myQueue;

typedef	struct student{

	char name[7];
	uint8_t roll_no;

}student_t;

void Task_1(void *pvparameters);
void Task_2(void *pvparameters);
void Task_3(void *pvparameters);
void ButtonTask(void *pvparameters);

void DAVE_Initialsisation(void);

//Semaphore..

TaskHandle_t xManager_Handle_1,xEmployee_Handle_2;
SemaphoreHandle_t xWork;
void Manager(void *pvparameters);
void Employee(void *pvparameters);

int main(void)
{

	DAVE_Initialsisation();

	BaseType_t status;
	xWork = xSemaphoreCreateBinary();

	configASSERT(xWork != NULL);

	xSemaphoreGive( xWork );   //First time we need to give


	status = xTaskCreate(Manager,"Manager",200,NULL,3,&xManager_Handle_1);

	configASSERT(status == pdPASS);

	status = xTaskCreate(Employee,"employee",200,NULL,1,&xEmployee_Handle_2);

	configASSERT(status == pdPASS);

	myQueue = xQueueCreate(1, sizeof( uint8_t ));  //this creation is very important it can save HEAP memory
	configASSERT(myQueue != NULL);


	vTaskStartScheduler();

}

void Manager(void *pvparameters)
{
uint8_t RandomNumber,xTdata[] = "Task sent",xTBuffer[6];
BaseType_t status;

xSemaphoreGive( xWork );

	while(1)
	{
		RandomNumber = ((uint8_t)rand() & 0xFF);
		status = xQueueSend(myQueue,( void * )&RandomNumber,portMAX_DELAY);

		if(status == pdTRUE){

			UART_Transmit(&UART_0, xTdata, sizeof(xTdata)-1);
			memset(xTBuffer,0,sizeof(xTBuffer));
			sprintf(xTBuffer,"%d\r\n",RandomNumber);
			UART_Transmit(&UART_0,(uint8_t*) xTBuffer,sizeof(xTBuffer)-1);

			//manager has no work to do now as he send data to employee
			taskYIELD();    //leave the CPU give chance to employee to execute
		}
		else{




		}

	}

}

void Employee(void *pvparameters)
{
	uint8_t xReceiveNumber,xTBuffer[6],xTdata[] = "Task received:";
	BaseType_t status;

	while(1){

		xSemaphoreTake(xWork,0);
		status = xQueueReceive(myQueue, &xReceiveNumber, 0);
		if(status==pdPASS){

		UART_Transmit(&UART_0, xTdata, sizeof(xTdata)-1);
		memset(xTBuffer,0,sizeof(xTBuffer));
		sprintf(xTBuffer,"%d\r\n",xReceiveNumber);
		UART_Transmit(&UART_0,(uint8_t*) xTBuffer,sizeof(xTBuffer)-1);
		vTaskDelay(pdMS_TO_TICKS(xReceiveNumber));

		}else{



		}


	}

}

void DAVE_Initialsisation(void){

	DAVE_STATUS_t status;

	status = DAVE_Init();           /* Initialization of DAVE APPs  */

 if (status != DAVE_STATUS_SUCCESS)
 {
 		/* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");

	 while(1U)
	 {


	}

 }

}
